What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository it creates an empty repository. You need to do it so you can start using the repository.
How is the staging area different from the working directory and the repository? What value do you think it offers?
	Working directory is what you're working on prior to adding it to the repository, staging are your pending changes. Value allows you to change your mind or test something before you commit.

How can you use the staging area to make sure you have one commit per logical
change?
	By using a git diff --staged you can compare what is in the repository and what you have staged and verify there's only one change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Adding experimental features, languages, and untested add-ons, possibly different UI's as well. You could name each version of your UI a different branch and work on them without effecting the other branches.

How do the diagrams help you visualize the branch structure?
...you literally make a branch diagram that shows the structure. So by drawing it you see how they're connected.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
I get a headache. Because you're rejoining two branches. even though it should theoritcally look more like a zipper.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Pro's it saves time and possibly reduces human error
Con's it's not able to resolve conflicts.